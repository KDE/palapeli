I'll skip compilation and installation, as most people reading this will probably be familiar with CMake or build this automatically.

Concept
=======

Most puzzle pieces form quite a regular pattern, e.g. rectangles, triangles, hexagons. This regularity can be used to automatically calculate such patterns. Paladesign aims to simplify creation of new puzzle patterns.

Prerequisites
=============

The only thing you need is a good idea and the shape of a jigsaw puzzle piece (as SVG file). This source comes with a hexagon which we will use in this tutorial. You can find it in the pics subdirectory. Note that the piece consists only of a compact black plane. It is recommended that you do all your piece shapes in such format.

Usage
=====

Install and launch paladesign. You can see a grid of points aligned along two lines. The points mark what will become the position of the jigsaw puzzle pieces. (Of course, the jigsaw puzzle will usually be bigger than this, this is just a preview which has been limited for performance reasons.) There is a little arrow on each of the pieces, this arrow denotes the rotation of the piece. (You will learn more about rotation later.)

Physical relations
------------------

You will notice that you are able to drag the red lines around; the piece positions will follow them. These red lines are the physical relations. The physical relations are used to build the piece position array. Note also that you can edit the properties of the selected relation in the property list at the lower right. The properties include axis pitch and piece distance (geometrical attributes of the axis which thereby determine the piece positions) and the angle difference (which makes the rotation of the pieces change along the axis).

In the following paragraphs, I will denote pieces by two coordinates (x,y) where x is the position on the axis of the first physical relation and y is the position on the second physical relation axis. For example, (0,0) is the point in the center where both axes meet, while (1,0) is the point which is the point right to (0,0) (assuming you have not rotated your axes). The point (-3,2) will be in the upper left then. (The concept of a coordinate system is difficult to explain without a picture, but it might be familiar to most people with an interest in mathematics.)

Relations are not only used to build the position array, they are also used to determine the neighborship between pieces. The first physical relation, for instance, says that (0,0) has neighbors at (1,0) and (-1,0). This information will be used in Palapeli to combine neighbors when they are moved together by the player. You see that the physical relations are sufficient to describe neighborships in the classical field, but what for example when hexagons are arranged? In a hexagonal grid, each piece has six neighbors. We will therefore need another relation, a logical relation. A logical relation can be added using the toolbar button. Note that the relation is tied to the position of the pieces (which is determined by the physical relations). The logical relation can be dragged at the point marked as neighbor of (0,0). (The opposite point is also a neighbor of (0,0) automatically.)

The last thing you need for your pattern is the shape SVG. Use the toolbar button "Select shape" to load it, then adjust the relations' parameters to make the pieces fill the entire plane. It is good practice to let the pieces overlap a little bit to prevent holes between them. Here are some good values for the hexagon.svg from the pics subdirectory (this should help you to get an idea of the ideal result).
* Physical relations: 30° and 90° axis pitch, 0.85 units piece distance, 0° angle difference
* Logical relation: 1 step along PR 1, -1 step along PR 2
